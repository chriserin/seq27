Elm.ElmTest = Elm.ElmTest || {};
Elm.ElmTest.Runner = Elm.ElmTest.Runner || {};
Elm.ElmTest.Runner.String = Elm.ElmTest.Runner.String || {};
Elm.ElmTest.Runner.String.make = function (_elm) {
   "use strict";
   _elm.ElmTest = _elm.ElmTest || {};
   _elm.ElmTest.Runner = _elm.ElmTest.Runner || {};
   _elm.ElmTest.Runner.String = _elm.ElmTest.Runner.String || {};
   if (_elm.ElmTest.Runner.String.values) return _elm.ElmTest.Runner.String.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $ElmTest$Run = Elm.ElmTest.Run.make(_elm),
   $ElmTest$Test = Elm.ElmTest.Test.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var replicate = F2(function (n,c) {
      var go = function (n) {    return _U.cmp(n,0) < 1 ? _U.list([]) : A2($List._op["::"],c,go(n - 1));};
      return function (_p0) {
         return $String.fromList(go(_p0));
      }(n);
   });
   var vcat = function (_p1) {    return $String.concat(A2($List.intersperse,"\n",_p1));};
   var indent = function (n) {
      var indents = A2(replicate,n,_U.chr(" "));
      return function (_p2) {
         return vcat(A2($List.map,$String.append(indents),$String.lines(_p2)));
      };
   };
   var pretty = F2(function (n,result) {
      var passed = $ElmTest$Run.pass(result);
      var _p3 = result;
      switch (_p3.ctor)
      {case "Pass": return _U.list([{ctor: "_Tuple2",_0: A2(indent,n,A2($Basics._op["++"],_p3._0,": passed.")),_1: result}]);
         case "Fail": return _U.list([{ctor: "_Tuple2",_0: A2(indent,n,A2($Basics._op["++"],_p3._0,A2($Basics._op["++"],": FAILED. ",_p3._1))),_1: result}]);
         default: var allPassed = _U.eq($ElmTest$Run.failedTests(result),0);
           var subResults = allPassed ? _U.list([]) : A2($List.concatMap,pretty(n + 2),_p3._1.results);
           var msg = A2($Basics._op["++"],"Test Suite: ",A2($Basics._op["++"],_p3._0,A2($Basics._op["++"],": ",passed ? "all tests passed" : "FAILED")));
           return A2($List._op["::"],{ctor: "_Tuple2",_0: A2(indent,n,msg),_1: result},subResults);}
   });
   var run = function (t) {
      var tests = function () {
         var _p4 = t;
         if (_p4.ctor === "TestCase") {
               return _U.list([A2($ElmTest$Test.TestCase,_p4._0,_p4._1)]);
            } else {
               return _p4._1;
            }
      }();
      var result = $ElmTest$Run.run(t);
      var passedTests$ = $ElmTest$Run.passedTests(result);
      var passedSuites$ = $ElmTest$Run.passedSuites(result);
      var failedTests$ = $ElmTest$Run.failedTests(result);
      var allPassed = _U.eq(failedTests$,0) ? $ElmTest$Run.Pass("") : A2($ElmTest$Run.Fail,"","");
      var failedSuites$ = $ElmTest$Run.failedSuites(result);
      var summary = function (_p5) {
         return vcat(A2($List.map,indent(2),_p5));
      }(_U.list([A2($Basics._op["++"],
                $Basics.toString($ElmTest$Test.numberOfSuites(t)),
                A2($Basics._op["++"]," suites run, containing ",A2($Basics._op["++"],$Basics.toString($ElmTest$Test.numberOfTests(t))," tests")))
                ,_U.eq(failedTests$,0) ? "All tests passed" : A2($Basics._op["++"],
                $Basics.toString(passedSuites$),
                A2($Basics._op["++"]," suites and ",A2($Basics._op["++"],$Basics.toString(passedTests$)," tests passed")))
                ,_U.eq(failedTests$,0) ? "" : A2($Basics._op["++"],
                $Basics.toString(failedSuites$),
                A2($Basics._op["++"]," suites and ",A2($Basics._op["++"],$Basics.toString(failedTests$)," tests failed")))]));
      var results$ = function () {
         var _p6 = allPassed;
         if (_p6.ctor === "Pass") {
               return _U.list([{ctor: "_Tuple2",_0: "",_1: allPassed}]);
            } else {
               return A2(pretty,0,result);
            }
      }();
      return A2($List._op["::"],{ctor: "_Tuple2",_0: summary,_1: allPassed},results$);
   };
   var runDisplay = function (t) {
      var _p7 = run(t);
      if (_p7.ctor === "::" && _p7._0.ctor === "_Tuple2") {
            return vcat(A2($List._op["::"],A2($Basics._op["++"],_p7._0._0,"\n"),A2($List.map,$Basics.fst,_p7._1)));
         } else {
            return "";
         }
   };
   return _elm.ElmTest.Runner.String.values = {_op: _op,runDisplay: runDisplay,run: run};
};