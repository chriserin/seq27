Elm.ElmTest = Elm.ElmTest || {};
Elm.ElmTest.Run = Elm.ElmTest.Run || {};
Elm.ElmTest.Run.make = function (_elm) {
   "use strict";
   _elm.ElmTest = _elm.ElmTest || {};
   _elm.ElmTest.Run = _elm.ElmTest.Run || {};
   if (_elm.ElmTest.Run.values) return _elm.ElmTest.Run.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $ElmTest$Assertion = Elm.ElmTest.Assertion.make(_elm),
   $ElmTest$Test = Elm.ElmTest.Test.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var failedSuites = function (result) {
      var _p0 = result;
      if (_p0.ctor === "Report") {
            var _p2 = _p0._1;
            var failed = _U.cmp($List.length(_p2.failures),0) > 0 ? 1 : 0;
            return failed + function (_p1) {
               return $List.sum(A2($List.map,failedSuites,_p1));
            }(_p2.results);
         } else {
            return 0;
         }
   };
   var passedSuites = function (result) {
      var _p3 = result;
      if (_p3.ctor === "Report") {
            var _p5 = _p3._1;
            var passed = _U.eq($List.length(_p5.failures),0) ? 1 : 0;
            return passed + function (_p4) {
               return $List.sum(A2($List.map,passedSuites,_p4));
            }(_p5.results);
         } else {
            return 0;
         }
   };
   var failedTests = function (result) {
      var _p6 = result;
      switch (_p6.ctor)
      {case "Pass": return 0;
         case "Fail": return 1;
         default: return function (_p7) {
              return $List.sum(A2($List.map,failedTests,_p7));
           }(_p6._1.results);}
   };
   var passedTests = function (result) {
      var _p8 = result;
      switch (_p8.ctor)
      {case "Pass": return 1;
         case "Fail": return 0;
         default: return function (_p9) {
              return $List.sum(A2($List.map,passedTests,_p9));
           }(_p8._1.results);}
   };
   var pass = function (m) {
      var _p10 = m;
      switch (_p10.ctor)
      {case "Pass": return true;
         case "Fail": return false;
         default: return _U.cmp($List.length(function (_) {    return _.failures;}(_p10._1)),0) > 0 ? false : true;}
   };
   var fail = function (_p11) {    return $Basics.not(pass(_p11));};
   var Report = F2(function (a,b) {    return {ctor: "Report",_0: a,_1: b};});
   var Fail = F2(function (a,b) {    return {ctor: "Fail",_0: a,_1: b};});
   var Pass = function (a) {    return {ctor: "Pass",_0: a};};
   var run = function (test) {
      var _p12 = test;
      if (_p12.ctor === "TestCase") {
            var _p14 = _p12._0;
            var runAssertion = F2(function (t,m) {    return t({ctor: "_Tuple0"}) ? Pass(_p14) : A2(Fail,_p14,m);});
            var _p13 = _p12._1;
            switch (_p13.ctor)
            {case "AssertEqual": return A2(runAssertion,
                 _p13._0,
                 A2($Basics._op["++"],"Expected: ",A2($Basics._op["++"],_p13._1,A2($Basics._op["++"],"; got: ",_p13._2))));
               case "AssertNotEqual": return A2(runAssertion,_p13._0,A2($Basics._op["++"],_p13._1,A2($Basics._op["++"]," equals ",_p13._2)));
               case "AssertTrue": return A2(runAssertion,_p13._0,"not True");
               default: return A2(runAssertion,_p13._0,"not False");}
         } else {
            var results = A2($List.map,run,_p12._1);
            var _p15 = A2($List.partition,pass,results);
            var passes = _p15._0;
            var fails = _p15._1;
            return A2(Report,_p12._0,{results: results,passes: passes,failures: fails});
         }
   };
   var Summary = F3(function (a,b,c) {    return {results: a,passes: b,failures: c};});
   return _elm.ElmTest.Run.values = {_op: _op
                                    ,run: run
                                    ,pass: pass
                                    ,fail: fail
                                    ,failedTests: failedTests
                                    ,passedTests: passedTests
                                    ,failedSuites: failedSuites
                                    ,passedSuites: passedSuites
                                    ,Pass: Pass
                                    ,Fail: Fail
                                    ,Report: Report};
};