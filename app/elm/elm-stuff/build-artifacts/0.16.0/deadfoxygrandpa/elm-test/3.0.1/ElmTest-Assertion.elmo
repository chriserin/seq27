Elm.ElmTest = Elm.ElmTest || {};
Elm.ElmTest.Assertion = Elm.ElmTest.Assertion || {};
Elm.ElmTest.Assertion.make = function (_elm) {
   "use strict";
   _elm.ElmTest = _elm.ElmTest || {};
   _elm.ElmTest.Assertion = _elm.ElmTest.Assertion || {};
   if (_elm.ElmTest.Assertion.values) return _elm.ElmTest.Assertion.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var AssertNotEqual = F3(function (a,b,c) {    return {ctor: "AssertNotEqual",_0: a,_1: b,_2: c};});
   var assertNotEqual = F2(function (a,b) {    return A3(AssertNotEqual,function (_p0) {    return !_U.eq(a,b);},$Basics.toString(a),$Basics.toString(b));});
   var AssertEqual = F3(function (a,b,c) {    return {ctor: "AssertEqual",_0: a,_1: b,_2: c};});
   var assertEqual = F2(function (a,b) {    return A3(AssertEqual,function (_p1) {    return _U.eq(a,b);},$Basics.toString(a),$Basics.toString(b));});
   var assertionList = F2(function (xs,ys) {    return A3($List.map2,assertEqual,xs,ys);});
   var AssertFalse = function (a) {    return {ctor: "AssertFalse",_0: a};};
   var AssertTrue = function (a) {    return {ctor: "AssertTrue",_0: a};};
   var assertT = AssertTrue;
   var assert = function (b) {    return AssertTrue(function (_p2) {    return b;});};
   return _elm.ElmTest.Assertion.values = {_op: _op
                                          ,assertionList: assertionList
                                          ,assertT: assertT
                                          ,assert: assert
                                          ,assertEqual: assertEqual
                                          ,assertNotEqual: assertNotEqual
                                          ,AssertTrue: AssertTrue
                                          ,AssertFalse: AssertFalse
                                          ,AssertEqual: AssertEqual
                                          ,AssertNotEqual: AssertNotEqual};
};