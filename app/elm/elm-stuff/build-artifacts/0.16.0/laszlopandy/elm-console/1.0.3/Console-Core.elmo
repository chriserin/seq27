Elm.Console = Elm.Console || {};
Elm.Console.Core = Elm.Console.Core || {};
Elm.Console.Core.make = function (_elm) {
   "use strict";
   _elm.Console = _elm.Console || {};
   _elm.Console.Core = _elm.Console.Core || {};
   if (_elm.Console.Core.values) return _elm.Console.Core.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var Impure = function (a) {    return {ctor: "Impure",_0: a};};
   var Pure = function (a) {    return {ctor: "Pure",_0: a};};
   var WriteF = F2(function (a,b) {    return {ctor: "WriteF",_0: a,_1: b};});
   var Exit = function (a) {    return {ctor: "Exit",_0: a};};
   var GetC = function (a) {    return {ctor: "GetC",_0: a};};
   var PutS = F2(function (a,b) {    return {ctor: "PutS",_0: a,_1: b};});
   var mapF = F2(function (f,iof) {
      var _p0 = iof;
      switch (_p0.ctor)
      {case "PutS": return A2(PutS,_p0._0,function (_p1) {    return f(_p0._1(_p1));});
         case "GetC": return GetC(function (_p2) {    return f(_p0._0(_p2));});
         case "Exit": return Exit(_p0._0);
         default: return A2(WriteF,_p0._0,function (_p3) {    return f(_p0._1(_p3));});}
   });
   var andThen = F2(function (io,f) {
      var _p4 = io;
      if (_p4.ctor === "Pure") {
            return f(_p4._0);
         } else {
            return Impure(A2(mapF,A2($Basics.flip,andThen,f),_p4._0));
         }
   });
   _op[">>="] = andThen;
   var seq = F2(function (x,y) {    return A2(_op[">>="],x,function (_p5) {    return y;});});
   _op[">>>"] = seq;
   var forever = function (m) {    return A2(_op[">>="],m,function (_p6) {    return forever(m);});};
   var pure = Pure;
   var apply = F2(function (iof,iom) {    return A2(_op[">>="],iof,function (f) {    return A2(_op[">>="],iom,function (m) {    return pure(f(m));});});});
   _op["<*>"] = apply;
   var mapIO = F2(function (f,xs) {    return A3($List.foldr,function (_p7) {    return seq(f(_p7));},pure({ctor: "_Tuple0"}),xs);});
   var forEach = F2(function (xs,f) {    return A2(mapIO,f,xs);});
   var map = F2(function (f,io) {    var _p8 = io;if (_p8.ctor === "Pure") {    return Pure(f(_p8._0));} else {    return Impure(A2(mapF,map(f),_p8._0));}});
   var writeFile = function (obj) {    return Impure(A2(WriteF,obj,function (_p9) {    return Pure({ctor: "_Tuple0"});}));};
   var putStr = function (s) {    return Impure(A2(PutS,s,function (_p10) {    return Pure({ctor: "_Tuple0"});}));};
   var exit = function (_p11) {    return Impure(Exit(_p11));};
   var getChar = Impure(GetC(Pure));
   var readUntil = function (end) {
      var go = function (s) {
         return A2(_op[">>="],getChar,function (c) {    return _U.eq(c,end) ? pure(s) : go(A2($String.append,s,A2($String.cons,c,"")));});
      };
      return go("");
   };
   var getLine = readUntil(_U.chr("\n"));
   var putChar = function (c) {    return Impure(A2(PutS,A2($String.cons,c,""),function (_p12) {    return Pure({ctor: "_Tuple0"});}));};
   var putStrLn = function (s) {    return A2(_op[">>>"],putStr(s),putChar(_U.chr("\n")));};
   return _elm.Console.Core.values = {_op: _op
                                     ,putChar: putChar
                                     ,getChar: getChar
                                     ,exit: exit
                                     ,putStr: putStr
                                     ,putStrLn: putStrLn
                                     ,readUntil: readUntil
                                     ,writeFile: writeFile
                                     ,getLine: getLine
                                     ,map: map
                                     ,mapIO: mapIO
                                     ,forEach: forEach
                                     ,pure: pure
                                     ,apply: apply
                                     ,andThen: andThen
                                     ,seq: seq
                                     ,forever: forever
                                     ,PutS: PutS
                                     ,GetC: GetC
                                     ,Exit: Exit
                                     ,WriteF: WriteF
                                     ,Pure: Pure
                                     ,Impure: Impure
                                     ,mapF: mapF};
};