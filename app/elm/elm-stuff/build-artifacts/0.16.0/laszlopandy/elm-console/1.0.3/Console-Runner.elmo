Elm.Console = Elm.Console || {};
Elm.Console.Runner = Elm.Console.Runner || {};
Elm.Console.Runner.make = function (_elm) {
   "use strict";
   _elm.Console = _elm.Console || {};
   _elm.Console.Runner = _elm.Console.Runner || {};
   if (_elm.Console.Runner.values) return _elm.Console.Runner.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Console$Core = Elm.Console.Core.make(_elm),
   $Console$NativeCom = Elm.Console.NativeCom.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Trampoline = Elm.Trampoline.make(_elm);
   var _op = {};
   var mapFst = F2(function (f,_p0) {    var _p1 = _p0;return {ctor: "_Tuple2",_0: f(_p1._0),_1: _p1._1};});
   var put = F2(function (s,_p2) {    return {ctor: "_Tuple2",_0: s,_1: {ctor: "_Tuple0"}};});
   var get = function (s) {    return {ctor: "_Tuple2",_0: s,_1: s};};
   _op[">>="] = F3(function (f,k,s) {    var _p3 = f(s);var s$ = _p3._0;var y = _p3._1;return A2(k,y,s$);});
   var pure = F2(function (x,s) {    return {ctor: "_Tuple2",_0: s,_1: x};});
   var mapSt = F2(function (f,sf) {    return A2(_op[">>="],sf,function (_p4) {    return pure(f(_p4));});});
   var writeF = $Console$NativeCom.WriteFile;
   var getS = $Console$NativeCom.Get;
   var exit = $Console$NativeCom.Exit;
   var putS = $Console$NativeCom.Put;
   var extractRequests = function (io) {
      var _p5 = io;
      if (_p5.ctor === "Pure") {
            return pure({ctor: "_Tuple2",_0: _U.list([exit(0)]),_1: function (_p6) {    return $Console$Core.Pure(_p5._0);}});
         } else {
            var _p7 = _p5._0;
            switch (_p7.ctor)
            {case "PutS": return A2(mapSt,
                 mapFst(function (rs) {    return A2($List._op["::"],putS(_p7._0),rs);}),
                 pure({ctor: "_Tuple2",_0: _U.list([]),_1: _p7._1}));
               case "WriteF": return A2(mapSt,
                 mapFst(function (rs) {    return A2($List._op["::"],writeF(_p7._0),rs);}),
                 pure({ctor: "_Tuple2",_0: _U.list([]),_1: _p7._1}));
               case "Exit": return pure({ctor: "_Tuple2",_0: _U.list([exit(_p7._0)]),_1: function (_p8) {    return io;}});
               default: return A2(_op[">>="],
                 get,
                 function (st) {
                    var _p9 = $String.uncons(st.buffer);
                    if (_p9.ctor === "Nothing") {
                          return pure({ctor: "_Tuple2",_0: _U.list([getS]),_1: function (_p10) {    return io;}});
                       } else {
                          return A2(_op[">>="],put({buffer: _p9._0._1}),function (_p11) {    return extractRequests(_p7._0(_p9._0._0));});
                       }
                 });}
         }
   };
   var step = F3(function (resp,io,st) {
      var newST = function () {
         var _p12 = resp;
         if (_p12.ctor === "Nothing") {
               return st;
            } else {
               return {buffer: A2($String.append,st.buffer,_p12._0)};
            }
      }();
      var _p13 = A2(extractRequests,io({ctor: "_Tuple0"}),newST);
      var newST$ = _p13._0;
      var rs = _p13._1._0;
      var k = _p13._1._1;
      return {ctor: "_Tuple3",_0: k,_1: newST$,_2: rs};
   });
   var flattenReqs = function (rs) {
      var loop = F3(function (rs,acc,n) {
         loop: while (true) if (_U.cmp(n,100) > -1) return $Trampoline.Continue(function (_p14) {    return A3(loop,rs,acc,0);}); else {
               var _p15 = rs;
               if (_p15.ctor === "[]") {
                     return $Trampoline.Done($List.reverse(acc));
                  } else {
                     if (_p15._1.ctor === "[]") {
                           var _v6 = _U.list([]),_v7 = A2($List._op["::"],_p15._0,acc),_v8 = n + 1;
                           rs = _v6;
                           acc = _v7;
                           n = _v8;
                           continue loop;
                        } else {
                           var _p19 = _p15._1._1;
                           var _p18 = _p15._1._0;
                           var _p17 = _p15._0;
                           var _p16 = {ctor: "_Tuple2",_0: _p17,_1: _p18};
                           _v9_2: do {
                              if (_p16.ctor === "_Tuple2") {
                                    switch (_p16._0.ctor)
                                    {case "Exit": var _v10 = _U.list([]),_v11 = A2($List._op["::"],_p17,acc),_v12 = _p16._0._0 + 1;
                                         rs = _v10;
                                         acc = _v11;
                                         n = _v12;
                                         continue loop;
                                       case "Put": if (_p16._1.ctor === "Put") {
                                               var _v13 = A2($List._op["::"],putS(A2($Basics._op["++"],_p16._0._0,_p16._1._0)),_p19),_v14 = acc,_v15 = n + 1;
                                               rs = _v13;
                                               acc = _v14;
                                               n = _v15;
                                               continue loop;
                                            } else {
                                               break _v9_2;
                                            }
                                       default: break _v9_2;}
                                 } else {
                                    break _v9_2;
                                 }
                           } while (false);
                           var _v16 = A2($List._op["::"],_p18,_p19),_v17 = A2($List._op["::"],_p17,acc),_v18 = n + 1;
                           rs = _v16;
                           acc = _v17;
                           n = _v18;
                           continue loop;
                        }
                  }
            }
      });
      return $Trampoline.trampoline(A3(loop,rs,_U.list([]),0));
   };
   var start = {buffer: ""};
   var run = function (io) {
      var third = function (_p20) {    var _p21 = _p20;return _p21._2;};
      var f = F2(function (resp,_p22) {    var _p23 = _p22;return A3(step,resp,_p23._0,_p23._1);});
      var init = {ctor: "_Tuple3",_0: function (_p24) {    return io;},_1: start,_2: _U.list([$Console$NativeCom.Init])};
      return $Console$NativeCom.sendRequests(A2($Signal.map,third,A3($Signal.foldp,f,init,$Console$NativeCom.responses)));
   };
   var IOState = function (a) {    return {buffer: a};};
   return _elm.Console.Runner.values = {_op: _op
                                       ,IOState: IOState
                                       ,start: start
                                       ,run: run
                                       ,putS: putS
                                       ,exit: exit
                                       ,getS: getS
                                       ,writeF: writeF
                                       ,extractRequests: extractRequests
                                       ,flattenReqs: flattenReqs
                                       ,step: step
                                       ,pure: pure
                                       ,mapSt: mapSt
                                       ,get: get
                                       ,put: put
                                       ,mapFst: mapFst};
};