Elm.Console = Elm.Console || {};
Elm.Console.NativeCom = Elm.Console.NativeCom || {};
Elm.Console.NativeCom.make = function (_elm) {
   "use strict";
   _elm.Console = _elm.Console || {};
   _elm.Console.NativeCom = _elm.Console.NativeCom || {};
   if (_elm.Console.NativeCom.values) return _elm.Console.NativeCom.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Console$NativeCom = Elm.Native.Console.NativeCom.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var responses = $Native$Console$NativeCom.responses;
   var sendRequestBatch = function (requests) {    return $Native$Console$NativeCom.sendRequestBatch(requests);};
   var sendRequests = function (requests) {    return A2($Signal.map,sendRequestBatch,requests);};
   var Init = {ctor: "Init"};
   var WriteFile = function (a) {    return {ctor: "WriteFile",_0: a};};
   var Get = {ctor: "Get"};
   var Exit = function (a) {    return {ctor: "Exit",_0: a};};
   var Put = function (a) {    return {ctor: "Put",_0: a};};
   return _elm.Console.NativeCom.values = {_op: _op
                                          ,Put: Put
                                          ,Exit: Exit
                                          ,Get: Get
                                          ,WriteFile: WriteFile
                                          ,Init: Init
                                          ,sendRequests: sendRequests
                                          ,sendRequestBatch: sendRequestBatch
                                          ,responses: responses};
};